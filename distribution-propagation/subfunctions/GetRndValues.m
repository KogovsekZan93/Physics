function RndValues = GetRndValues...
    (VariablesDistributionInfo, N_Rnd)
%% Tool for finding randomly generated values of 
%% variables with prescribed distributions
% 
% Author: Žan Kogovšek
% Date: 9.27.2024
% Last changed: 9.27.2024
% 
%% Description
% 
% Given the input cell array "InputVariablesDistributionInfo", 
% which contains information about the distribution of variables 
% X_i, each X_i  variable being either a number of a column 
% vector, and the integer "N_Rnd", this function creates the 
% "RndValues" matrix of "N_Rnd" horizontally stacked column 
% vectors. Each column of the "RndValues" matrix is created by 
% vertically stacking the randomly generated values of the 
% variables X_i. The generation of each random value is based 
% on the distribution prescribed by the 
% "InputVariablesDistributionInfo" cell array. 
% 
%% Variables
% 
% This function has the form of RndValues = GetRndValues...
% (VariablesDistributionInfo, N_Rnd)
% 
% "InputVariablesDistributionInfo" is a horizontal cell array. Each 
% "InputVariablesDistributionInfo"{i} cell contains the information 
% about the distribution of some variable X_i, the values of which 
% are to be randomly generated "N_Rnd" times. Each cell of the 
% "InputVariablesDistributionInfo" cell array can only be of one 
% of the following five forms: 
%    1. "InputVariablesDistributionInfo"{i} is a column vector of 
%         numbers. 
%            In this case, the X_i variable is a number. The values of 
%            the X_i variable will be generated by random selection 
%            of one of the numbers of the vector 
%            "InputVariablesDistributionInfo"{i}. 
%    2.	"InputVariablesDistributionInfo"{i} has the form {"V", "R"}, 
%         where "V" is a column vector and "R" a matrix of 
%         numbers. 
%            In this case, the X_i variable is a column vector. The 
%            values of the X_i variable will be the randomly 
%            generated vectors with the mean "V" and the 
%            covariance matrix "R" of the variables of the vector. 
%    3.	"InputVariablesDistributionInfo"{i} has the form 
%         {{"V", "S"}, 1}, where "V" is a column vector and "S" is a 
%         nonnegative real number.  
%            In this case, the X_i variable is a vector. The values of 
%            the X_i variable will be vectors v, the values v(k) of each 
%            vector v being independently randomly and uniformly 
%            generated from the interval ["V"(k) - "S", "V"(k) + "S"]. 
%    4.	"InputVariablesDistributionInfo"{i} has the form 
%         {{"V", "STD"}, 2}, where "V" is a column vector and "STD" 
%         is a nonnegative real number. 
%            In this case, the X_i variable is a vector. The values of 
%            the X_i variable will be column vectors v, the values v(k) 
%            of each vector v being independently randomly 
%            generated from the normal distribution with the mean 
%            V(k) and the standard deviation "STD". 
%    5.	"InputVariablesDistributionInfo"{i} has the form 
%         {{"V", "S_STD"}, 3}, where "V" is a column vector and 
%         "S_STD" is a nonnegative real number. 
%            In this case, the X_i variable is a column vector. The 
%            values of the X_i variable will be vectors v, the values 
%            v(k) of each vector v being independently randomly and 
%            uniformly generated such that the mean value is "V"(k) 
%            and the standard deviation is "S_STD" (the interval thus 
%            being ["V"(k) - "S_STD" * sqrt(12) / 2, 
%            "V"(k) + "S_STD" * sqrt(12) / 2]). 
% 
% "N_Rnd" is the number of column vectors that are to be 
% stacked horizontally to create the “RndValues” matrix. Each 
% column vector is to be created by vertically stacking randomly 
% generated values of the variables, each of which is either a 
% number or a column vector and the distribution of which is 
% prescribed by the "InputVariablesDistributionInfo" cell array. 
% "N_Rnd" must be a natural number. 
% 
% "RndValues" is a matrix of "N_Rnd" column vectors stacked 
% horizontally together. Each column vector is created by 
% vertically stacking randomly generated values of the variables, 
% each of which is either a number or a column vector and the 
% distribution of which is prescribed by the 
% "InputVariablesDistributionInfo" cell array. 


pars = inputParser;

paramName = 'VariablesDistributionInfo';
errorMsg = '''VariablesDistributionInfo'' must be a horizontal cell.';
Size_VariablesDistributionInfo = size(VariablesDistributionInfo);
validationFcn = @(x)assert(iscell(x) && ...
    Size_VariablesDistributionInfo(1) == 1 && ...
    length(Size_VariablesDistributionInfo) <= 2, errorMsg);
addRequired(pars, paramName, validationFcn);

paramName = 'N_Rnd';
errorMsg = '''N_Rnd'' must be a natural number.';
validationFcn = @(x)assert(isnumeric(x) && isscalar(x) && ...
    mod(x,1) == 0 && x > 0, errorMsg);
addRequired(pars, paramName, validationFcn);

parse(pars, VariablesDistributionInfo, N_Rnd);

length_Variables = length(VariablesDistributionInfo);
RndValues = num2cell(zeros(length_Variables, 1));

% Even though it is useful to think of the "RndValues" matrix of 
% "N_Rnd" horizontally stacked vectors, the "RndValues" matrix 
% is actually created by generating each horizontal vector of it 
% individually (thus generating all random values of the individual 
% X_i variable in the same code line) as its own cell in the 
% "RndValues" vertical cell array and by afterwards converting 
% the "RndValues" vertical cell array to a matrix stacking the 
% previously generated horizontal vectors vertically. 
for i = 1 : length_Variables
    if iscell(VariablesDistributionInfo{i}) == 0
        RndValues{i} = ...
            (datasample(VariablesDistributionInfo{i}, N_Rnd))';
    else
        if ismatrix(VariablesDistributionInfo{i}{2}) && ...
                ~isvector(VariablesDistributionInfo{i}{2})
            RndValues{i} = (mvnrnd(VariablesDistributionInfo{i}{1}, ...
                VariablesDistributionInfo{i}{2}, N_Rnd))';
        else
            if VariablesDistributionInfo{i}{2} == 1
                RndValues{i} = 2 * VariablesDistributionInfo{i}{1}{2} * ...
                    (rand(length(VariablesDistributionInfo{i}{1}{1}), ...
                    N_Rnd) - (1 / 2)) + VariablesDistributionInfo{i}{1}{1};
            else
                if VariablesDistributionInfo{i}{2} == 2
                    RndValues{i} = VariablesDistributionInfo{i}{1}{1} + ...
                        normrnd(0, VariablesDistributionInfo{i}{1}{2}, ...
                        [length(VariablesDistributionInfo{i}{1}{1}), N_Rnd]);
                else
                    if VariablesDistributionInfo{i}{2} == 3
                        variance_Variable = ...
                            VariablesDistributionInfo{i}{1}{2} * sqrt(12) / 2;
                        RndValues{i} = 2 * variance_Variable * ...
                            (rand(length(VariablesDistributionInfo{i}{1}{1}), ...
                            N_Rnd) - (1 / 2)) + ...
                            VariablesDistributionInfo{i}{1}{1};
                    else
                        error...
                            ('''VariablesDistributionInfo''{%d} does not satisfy proper form.', i)
                    end
                end
            end
        end
    end
end

RndValues = cell2mat(RndValues);

end